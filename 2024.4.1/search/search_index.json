{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyScript and Pyodide Recipes","text":"<p>This site contains a number of code snippets and guideines for accomplishing specific tasks with PyScript, Pyodide, and Micropython.</p> What are Pyodide, PyScript,and Micropython? <p>PyScript is an HTML-focused framework for utilizing WebAssembly-based Python runtimes in the browser. It adds additonal Python and HTML API's to ease integration of Python with web development.</p> <p>Pyodide is a distribution of Python for Web Browsers and NodeJS. It takes the CPython interpreter, compiles it to Web Assembly (using Emscripten), adds some additional useful JavaScript APIs and Python APIs, and makes it all available via a CDN. Additionally, the Pyodide project provides over 100 packages with their C/Rust/Fortran extensions pre-compiled to run on WebAssembly; these are made available through an additional built-in tool called Micropip.</p> <p>Micropython is a reimplementation of Python, originally intended for microcontrollers, that emphasizes small code side and rapid execution. Its download size is less than 5% of that of Pyodide/CPython, however due to its different object model, it is not generally compatible with CPython packages that have extensions in C, Rust, FORTRAN, etc.</p> What is a recipe? <p>A recipe is short snippet of code intended to do one simple thing. It is different from an example, which might be a fully-realized page accomplishing some holistic task; and a tutorial, which gives an in-depth explanation of the full usage of a specific piece of functionality or API.</p> <p>Some recipes are followed by tutorials explaning how they work.</p>"},{"location":"about/","title":"About","text":"<p>This site is authored by Jeff Glass, a PyScript maintainer and core contributor. It serves as a repository of useful snippets, based on frequetly asked questions in the PyScript discord, the [Pyscript] Stack Overflow tag, the PyScript Subreddit, and the official forum.</p>"},{"location":"about/#contributions","title":"Contributions","text":"<p>Contritions are welcomed and encouraged! See the GitHub Repo for information on submiting a recipe. Note that all content in contributions will be subject to the license information listed below.</p>"},{"location":"about/#license","title":"License","text":"<p>All code samples for PyScript, Pyodide, and/or Micropython on this site are licensed under The Unlicense.</p> <p>All written text on this site that is not a code sample for PyScript, Pyodide, and/or Micropython is licensed under CC BY-SA 4.0</p>"},{"location":"basic/file-download/","title":"Downloading Files","text":"<p>The PyScript and Pyodide versions of this recipe are identical. This recipe does not currently work with Micropython, due to limitations in passing objects between JavaScript and Python.</p> Purpose <p>Many users user PyScript or Pyodide to create new files, or modify existing or uploaded files. One way to persist these files after the webpage is closed is to allow the user to download them.</p> Recipe <p>First, we'll need a button, link, or other element for the user to interact with to start the download. There are some actions (like file downloads) that web browsers will only permit in response to user actions; thankfully, downloading a file is one of that. You wouldn't want any arbitrary website to start downloading a file without your permission, right?</p> <pre><code>&lt;button id=\"download\"&gt;Click to Download&lt;/button&gt;\n</code></pre> <p>Then, include the following code to cause a text file to be created and donloaded when this button is clicked. The information in the <code>data</code> variable will be included in the fie; the filename of the file will be, in this example, <code>my_other_file_name.txt</code>,</p> <pre><code>from js import Uint8Array, File, URL, document\nimport io\nfrom pyodide.ffi.wrappers import add_event_listener\n\ndata = \"Hello world, this is some text.\"\n\ndef downloadFile(*args):\n    encoded_data = data.encode('utf-8')\n    my_stream = io.BytesIO(encoded_data)\n\n    js_array = Uint8Array.new(len(encoded_data))\n    js_array.assign(my_stream.getbuffer())\n\n    file = File.new([js_array], \"unused_file_name.txt\", {type: \"text/plain\"})\n    url = URL.createObjectURL(file)\n\n    hidden_link = document.createElement(\"a\")\n    hidden_link.setAttribute(\"download\", \"my_other_file_name.txt\")\n    hidden_link.setAttribute(\"href\", url)\n    hidden_link.click()\n\nadd_event_listener(document.getElementById(\"download\"), \"click\", downloadFile)\n</code></pre> Tutorial <p>Next, we'll start setting up a function that will be called to download our file. (We'll handle actually attaching this function to our file download button in a moment.)</p> <p>Wiring up this function as an event listener means it will be passed an Event Object, but for our current example, we won't actually need it. We'll add <code>*args</code> to our function paramters to capture and swallow this argument.</p> <pre><code>import io\n\ndef downloadFile(*args):\n    # The data we ultimately want to have in our file\n    data = \"Hello world, this is some text.\"\n\n    #Transform our string of data into bytes; you may want to adjust the encoding here\n    encoded_data = data.encode('utf-8')\n\n    # convert data into bytesIO object which can be read as a buffer\n    my_stream = io.BytesIO(encoded_data)\n</code></pre> <p>Next we'll directly createa a new <code>Uint8Array</code> in JavaScript which will hold our data; we'll pass it the size of our data in bytes so that its initialized to the correct size. Then, we can use the <code>assign</code> method from Pyodide's Foreign Function Interface to directly copy from the buffer of our BytesIO objec to the buffer of the Uint8Array object:</p> <pre><code>from js import Uint8Array\nimport io\n\ndef downloadFile(*args):\n    data = \"Hello world, this is some text.\"\n    encoded_data = data.encode('utf-8')\n    my_stream = io.BytesIO(encoded_data)\n\n    #initialize the JavaScript array of Bytes with the right size\n    js_array = Uint8Array.new(len(encoded_data))\n\n    # Copy of the contents of the Python butter into the JavaScript buffer\n    js_array.assign(my_stream.getbuffer())\n</code></pre> <p>Once we have our data in a JavaScript buffer, we can create a new File object so that the browser can treat our data as a file and download it:</p> <pre><code>from js import Uint8Array, File, URL\nimport io\n\ndef downloadFile(*args):\n    data = \"Hello world, this is some text.\"\n    encoded_data = data.encode('utf-8')\n    my_stream = io.BytesIO(encoded_data)\n\n    js_array = Uint8Array.new(len(encoded_data))\n    js_array.assign(my_stream.getbuffer())\n\n    # File constructor takes a buffer, a name, and a MIME type. The name will not actually be used\n    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\n    file = File.new([js_array], \"unused_file_name.txt\", {type: \"text/plain\"})\n    url = URL.createObjectURL(file)\n</code></pre> <p>Now that we have a File to work with, and an internal URL that the browser can point to, we'll create a \"hidden\" link to actually download this file. The link is hidden in that we don't actually ever need to add it to the page - simply creating the link object and telling the browser to \"click\" it is enough:</p> <pre><code>from js import Uint8Array, File, URL, document\nimport io\n\ndef downloadFile(*args):\n    data = \"Hello world, this is some text.\"\n    encoded_data = data.encode('utf-8')\n    my_stream = io.BytesIO(encoded_data)\n\n    js_array = Uint8Array.new(len(encoded_data))\n    js_array.assign(my_stream.getbuffer())\n\n    file = File.new([js_array], \"unused_file_name.txt\", {type: \"text/plain\"})\n    url = URL.createObjectURL(file)\n\n    hidden_link = document.createElement(\"a\")\n    # The second parameter here is the actual name of the file that will appear in the user's file system\n    hidden_link.setAttribute(\"download\", \"my_other_file_name.txt\")\n    hidden_link.setAttribute(\"href\", url)\n    hidden_link.click()\n</code></pre> <p>Finally, we'll wire up our button to call our handler function. There are multiple ways to do this, but the cleanest way currently is to use a function from the Pyodide Foreign Function interface called <code>add_event_listener</code>. This function takes a reference to an element on the page, the name of an Event, and the name of the function or Callable to use as the function handler.</p> <pre><code>from js import Uint8Array, File, URL, document\nimport iobutt\nfrom pyodide.ffi.wrappers import add_event_listener\n\ndef downloadFile(*args):\n    data = \"Hello world, this is some text.\"\n    encoded_data = data.encode('utf-8')\n    my_stream = io.BytesIO(encoded_data)\n\n    js_array = Uint8Array.new(len(encoded_data))\n    js_array.assign(my_stream.getbuffer())\n\n    file = File.new([js_array], \"unused_file_name.txt\", {type: \"text/plain\"})\n    url = URL.createObjectURL(file)\n\n    hidden_link = document.createElement(\"a\")\n    hidden_link.setAttribute(\"download\", \"my_other_file_name.txt\")\n    hidden_link.setAttribute(\"href\", url)\n    hidden_link.click()\n\nadd_event_listener(document.getElementById(\"download\"), \"click\", downloadFile)\n</code></pre>"},{"location":"basic/file-upload/","title":"Uploading Files","text":"<p>This page is about allowing end users to upload files</p> <p>This page is about setting up an interface for the users of your page to upload files. To setup files to be loaded on page load in PyScript, use <code>&lt;py-config&gt; [[fetch]] or [[files]]</code></p> <p>The PyScript and Pyodide versions of this recipe are identical. This recipe does not currently work with Micropython, due to limitations in passing objects between JavaScript and Python.</p> Purpose <p>As front-end frameworks, it is often useful for users of PyScript or Pyodide to allow users to upload their own individual files to the web page for processing. These might be CSV or parquet files of data, images for processing, text files etc.</p> Recipe <p>First, we'll need to set up a file upload element to accept the user's uploaded file.</p> <pre><code>&lt;label for=\"Upload a File\"&gt;&lt;/label&gt;\n&lt;input type=\"file\" id=\"file-upload\"&gt;\n</code></pre> <p>Then, include the following code to allow the user to upload a file, and to do something with it once its uploaded. (Replace the <code>print</code> statement with the work you want to do.)</p> <pre><code>from js import document, window, Uint8Array\nfrom pyodide.ffi.wrappers import add_event_listener\n\nasync def upload_file_and_show(e):\n    file_list = e.target.files\n    first_item = file_list.item(0)\n\n    my_bytes: bytes = await get_bytes_from_file(first_item)\n    print(my_bytes[:10]) # Do something with file contents\n\nasync def get_bytes_from_file(file):\n    array_buf = await file.arrayBuffer()\n    return array_buf.to_bytes()\n\nadd_event_listener(document.getElementById(\"file-upload\"), \"change\", upload_file_and_show)\n</code></pre> Tutorial <p>Let's start our Python code from scratch, and see how we'd go about setting up a a function to handle the file upload once it's triggered. (We'll handle actually attaching this function to our file upload element in a moment.)</p> <pre><code># import a couple of useful objects from the JavaScript global namespace\nfrom js import document, window\n\n# this function will receive an event object pointing to the HTML element\n# we can read its FileList ('files') and get the first item in it (.item(0))\ndef upload_file_and_show(e):\n    file_list = e.target.files\n    first_item = file_list.item(0)\n</code></pre> <p>Once we have a reference to the File object, we can extract it's contents to work with. There a multiple ways in which you can receive a file's contents; perhaps the most versatile is by receiving a raw Iterable of its bytes:</p> <pre><code>from js import document, window, Uint8Array\n\n# Because retreiving of a file's ArrayBuffer is an asynchronous process,\n# we need to make our function async\nasync def upload_file_and_show(e):\n    file_list = e.target.files\n    first_item = file_list.item(0)\n\n    my_bytes: bytes = await get_bytes_from_file(first_item)\n\n    # Do something with the bytes once we have them\n    print(my_bytes[:10])\n\nasync def get_bytes_from_file(file):\n    # Get the File object's arrayBuffer - just an ordered iterable of the bytes of the file\n    # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n    array_buf = await file.arrayBuffer()\n\n    # Use pyodide's ability to quickly copy the array buffer to a Python 'bytes' object\n    # https://pyodide.org/en/stable/usage/api/python-api/ffi.html#pyodide.ffi.JsBuffer.to_bytes\n    # https://docs.python.org/3/library/stdtypes.html#bytes-objects\n    return array_buf.to_bytes()\n</code></pre> <p>Finally, we'll wire up the HTML file upload element to the function we just wrote. There are multiple ways to do this, but the cleanest way currently is to use a function from the Pyodide Foreign Function interface called <code>add_event_listener</code>. This function takes a reference to an element on the page, the name of an Event, and the name of the function or Callable to use as the function handler.</p> <pre><code>from js import document, window, Uint8Array\nfrom pyodide.ffi.wrappers import add_event_listener\n\nasync def upload_file_and_show(e):\n    file_list = e.target.files\n    first_item = file_list.item(0)\n\n    my_bytes: bytes = await get_bytes_from_file(first_item)\n    print(my_bytes[:10]) # Do something with file contents\n\nasync def get_bytes_from_file(file):\n    array_buf = await file.arrayBuffer()\n    return array_buf.to_bytes()\n\n# Use pyodide's FFI to attach the function as an event listener for the file upload element\n# https://pyodide.org/en/stable/usage/api/python-api/ffi.html#pyodide.ffi.wrappers.add_event_listener\nadd_event_listener(document.getElementById(\"file-upload\"), \"change\", upload_file_and_show)\n</code></pre> <p>See also:     <ul> <li>File Download</li> </ul> </p>"},{"location":"basic/installation/","title":"Installation","text":"PyScriptPyodide <p>There is no need to install anything on your computer to use PyScript. Inside your HTML document, include the following tag. Ideally, this should go inside your <code>&lt;head&gt;</code> tag, but it is also fine to put them inside the  <code>&lt;body&gt;</code> tag:</p> <pre><code>&lt;script type=\"module\" src=\"https://pyscript.net/releases/2023.12.1/core.js\"&gt;&lt;/script&gt;\n</code></pre> <p>This tag is the same whether you intend to use the Pyodide (CPython) interpreter or Micropython.</p> <p>There is no need to install anything on your computer to use Pyodide. Inside your HTML document, include the following tags. Ideally, this should go inside your <code>&lt;head&gt;</code> tag, but it is also fine to put it inside the <code>&lt;body&gt;</code> tag:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"basic/installing-packages/","title":"Installing Python Packages","text":"<p>In addition to most of the Standard Library, many other Python pacakges can loaded and used in the Browser. There are three types of Packages that can be loaded:</p> <ul> <li>Packages that have been pre-built by the Pyodide team, with their C/Rust/Fortran extensions pre-compiled to work in Web Assembly.</li> <li>Pure Python packages that are available on PyPI; that is, packages which publish a wheel ending in <code>-none-any.whl</code>. (Some packages written only in Python do not publish Pure Python wheels; check the 'Download Files' section on PyPI to confirm.)</li> <li>Pure Python wheels that you build yourself.</li> </ul> PyScript (Pyodide)PyScript (Micropython)Pyodide <p><p>To install a new Python package in PyScript, include the name of the package or the URL of the self-built wheel in the <code>packages</code> list in code <code>&lt;py-config&gt;</code></p> <pre><code>&lt;py-config&gt;\n    packages = ['astropy', 'pyyaml', 'https://example.com/files/someWheel-py3-none-any.whl']\n    # packages can be from PyPI, Pyodide Packages, or self-built wheels\n&lt;/py-config&gt;\n</code></pre></p> <p><p>To install a new Micropython package in PyScript, include the name of the package in the <code>packages</code> list in code <code>&lt;mpy-config&gt;</code>.</p> <pre><code>&lt;mpy-config&gt;\n    packages = ['curses.ascii']\n&lt;/mpy-config&gt;\n</code></pre> <p>To list of strings in <code>packages</code> are passed invidiually to the Micropython's <code>mip</code> tool. This means that by default packages are looked up in the <code>micropthon-lib</code> repository, but you can also install directly from a URL, or, using the shorthand demo'd below, from a GitHub repo: <pre><code>&lt;mpy-config&gt;\n    packages = [\n        'http://example.com/x/y/foo.mpy', # Download from URL\n        'github:org/user/path/package.json' # Download from GH Repo\n        ]\n&lt;/mpy-config&gt;\n</code></pre></p> <p><p>To install a new Python package from PyPI in Pyodide, first install the <code>micropip</code> python package, then use <code>micropip.install(package_name)</code>. For example, to load the Pure Python package <code>pyyaml</code>, and use it in some Python code:</p> <pre><code>async function main() {\n    let pyodide = await loadPyodide(); //load pyodide\n\n    await pyodide.loadPackage(\"micropip\");\n    const micropip = pyodide.pyimport(\"micropip\");\n    await micropip.install('pyyaml');\n\n    // Once installed, packages can be imported and used\n    pyodide.runPython(`\n        import yaml\n        document = \"\"\"\n        a: 1\n        b:\n            c: 3\n            d: 4\n        \"\"\"\n        y = yaml.safe_load(document)\n        print(yaml.dump(y))\n    `)\n    };\nmain();\n</code></pre> <p>To load a package built by the Pyodide project, use <code>pyodide.loadPackage</code>:</p> <pre><code>    //...\n    await pyodide.loadPackage(\"astropy\");\n    //...\n</code></pre> </p>"},{"location":"basic/repl/","title":"In-Browser Editor","text":"PyScript (Pyodide)PyScript (Micropython) <p>Add a <code>&lt;py-editor&gt;</code> tag anywhere on your page to create an editable, runnable code-editor on the page: <pre><code>&lt;py-editor&gt;\n    # Text inside the editor is pre-populated\n    for i in range(5):\n        print(i)\n&lt;/py-editor&gt;\n</code></pre></p> <p>Editors are a worker-only feature - you will need to conigure your server to use the appropriate headers, or use a shim like mini-coi.js.</p> <p>ENV</p> <p>By default, all <code>py-editor</code>s of a given type willl reuse the same interpreter/worker. To separate different editors or groups of editors into using different interpreters, use the named <code>env</code> attribute:</p> <pre><code>&lt;py-editor env=\"first\"&gt;\n    x = 0\n&lt;/py-editor&gt;\n\n&lt;py-editor env=\"first\"&gt;\n    print(x) # Works fine; uses the 'first' interpreter\n&lt;/py-editor&gt;\n\n&lt;py-editor env=\"second\"&gt;\n    print(x) # Fails: 'second' is a while different Pyodide interpreter.\n&lt;/py-editor&gt;\n</code></pre> <p>Add a <code>&lt;mpy-editor&gt;</code> tag anywhere on your page to create an editable, runnable code-editor on the page: <pre><code>&lt;mpy-editor&gt;\n    # Text inside the editor is pre-populated\n    for i in range(5):\n        print(i)\n&lt;/mpy-editor&gt;\n</code></pre></p> <p>Editors are a worker-only feature - you will need to conigure your server to use the appropriate headers, or use a shim like mini-coi.js.</p> <p>ENV</p> <p>By default, all <code>mpy-editor</code>s of a given type willl reuse the same interpreter/worker. To separate different editors or groups of editors into using different interpreters, use the named <code>env</code> attribute:</p> <pre><code>&lt;mpy-editor env=\"first\"&gt;\n    x = 0\n&lt;/mpy-editor&gt;\n\n&lt;mpy-editor env=\"first\"&gt;\n    print(x) # Works fine; uses the 'first' interpreter\n&lt;/mpy-editor&gt;\n\n&lt;mpy-editor env=\"second\"&gt;\n    print(x) # Fails: 'second' is a while different Pyodide interpreter.\n&lt;/mpy-editor&gt;\n</code></pre>"},{"location":"basic/running-code/","title":"Running Code","text":"PyScript (Pyodide)PyScript (Micropython)Pyodide <p><p>Once you have PyScript running on your page, you can start writing Python code inside a <code>&lt;script&gt;</code> tag with the attribute <code>type=\"py\"</code>, which will then be executed when the page loads.</p> <pre><code>&lt;script type=\"py\"&gt;\n    print(\"Hello, world\")\n    for i in range(10):\n        print(i)  \n&lt;/script&gt;\n</code></pre></p> <p>Info</p> <p>Note that Python's <code>print</code> function outputs to the browser's dev console. To output content to the screen, use PyScript's display function</p> <p><p>A complete example of an HTML page which loads PyScript and runs some Python code (including some additional recommended HTML bits) might look like:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Hello, world!&lt;/title&gt;\n    &lt;script type=\"module\" src=\"https://pyscript.net/releases/2023.12.1/core.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"py\"&gt;\n        print(\"Hello, world!\")\n        for i in range(10):\n            print(i)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p><p>Once you have PyScript running on your page, you can start writing Python code inside a <code>&lt;script&gt;</code> tag with the attribute <code>type=\"mpy\"</code>, which will then be executed when the page loads.</p> <pre><code>&lt;script type=\"mpy\"&gt;\n    print(\"Hello, world\")\n    for i in range(10):\n        print(i)  \n&lt;/script&gt;\n</code></pre></p> <p>Info</p> <p>Note that Python's <code>print</code> function outputs to the browser's dev console. To output content to the screen, use PyScript's display function</p> <p><p>A complete example of an HTML page which loads PyScript and runs some Python code (including some additional recommended HTML bits) might look like:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Hello, world!&lt;/title&gt;\n    &lt;script type=\"module\" src=\"https://pyscript.net/releases/2023.12.1/core.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"mpy\"&gt;\n        print(\"Hello, world!\")\n        for i in range(10):\n            print(i)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p><p>Once you have the Pyodide script included on your page, you can use the global loadPyodide() function in JavaScript to load the Pyodide runtime. Once loaded, the runtime can be used to execute Python code. Note that <code>loadPyodide</code> is an async function, and so must be awaited within another async function in order to retrieve a reference to the runtime once it loads.</p> <p>Once loaded, call the <code>runPython()</code> method of the resulting runtime to execute Python code:</p> <pre><code>async function main() {\n    let pyodide = await loadPyodide();\n    // Pyodide is now ready to use...\n    console.log(pyodide.runPython(`\n        import sys\n        print(sys.version)\n    `));\n};\nmain();\n</code></pre></p> <p>Info</p> <p>Note that Python's <code>print</code> function outputs to the browser's dev console.</p> <p><p>A complete example of an HTML page with PyScript (including some additional recommended HTML bits) might look like:</p></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hello, world!&lt;/title&gt;\n\n    &lt;script src=\"https://cdn.jsdelivr.net/pyodide/v0.22.1/full/pyodide.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\n        async function main() {\n            let pyodide = await loadPyodide();\n            // Pyodide is now ready to use...\n            console.log(pyodide.runPython(`\n                import sys\n                print(sys.version)\n            `));\n        };\n        main();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"basic/test/","title":"Test","text":"foobar <p>hello</p> <p>world</p>"},{"location":"basic/when-finished/","title":"Run Code when PyScript Has Finished","text":"PyScript(Pyodide)PyScript (Micropython) <p>PyScript emits a custom event called \"py:all-done\" when all PyScript tags on the page have finished executing. To take some action once PyScript has run all its tags, add an event listener for this specific custom event.</p> <pre><code>&lt;script type=\"py\" worker&gt;\n    from pyscript import display, window\n    from pyodide.ffi.wrappers import add_event_listener\n\n    def callback(event):\n        display(\"This will run when all script tags are complete\")\n        display(f\"{event.type=}\")\n\n    add_event_listener(window, \"py:all-done\", callback)\n&lt;/script&gt;\n</code></pre> <p>or</p> <pre><code>&lt;script&gt;\n    window.addEventListener(\"py:all-done\", console.log)\n&lt;/script&gt;\n</code></pre> <p>Note</p> <p>This only applies to PyScript tags that were present on the page at its initial load. Any tags that are added dynamically after the page has loaded will not affect when the <code>py:all-done</code> event is dispatched. </p> <p>It does take both <code>async</code> and <code>worker</code> tags into account.</p> <p>PyScript emits a custom event called \"py:all-done\" when all PyScript tags on the page have finished executing. To take some action once PyScript has run all its tags, add an event listener for this specific custom event.</p> <pre><code>&lt;script type=\"mpy\" worker&gt;\n    from pyscript import display, window\n\n        def callback(event):\n            display(\"This will run when all script tags are complete\")\n            display(f\"{event.type=}\")\n\n        window.addEventListener(\"py:all-done\", callback)\n&lt;/script&gt;\n</code></pre> <p>or</p> <pre><code>&lt;script&gt;\n    window.addEventListener(\"py:all-done\", console.log)\n&lt;/script&gt;\n</code></pre> <p>Note</p> <p>This only applies to PyScript tags that were present on the page at its initial load. Any tags that are added dynamically after the page has loaded will not affect when the <code>py:all-done</code> event is dispatched. </p> <p>It does take both <code>async</code> and <code>worker</code> tags into account.</p>"},{"location":"js-integration/constructing-js-objects/","title":"Constructing JS Objects","text":"<p>The PyScript (Pyodide) and PyScript(Micropython) version of this recipe are identical, </p> <p>Python lacks the <code>new operator</code> that JavaScript uses to construct new objects. To work around this, proxies of JavaScript classes within Python gain a <code>new()</code> which calls their constructor.</p> <p>If you have a JavaScript class defined like so:</p> <pre><code>var Boat = class Boat{\n    constructor(size, power){\n        this.size = size\n        this.power = power\n    }\n}\n</code></pre> <p>We can construct new instances of the class within Python like so:</p> <pre><code>from js import Boat\n\nsailboat = Boat.new(\"33ft\", \"sailpower\")\ntugboat = Boat.new(\"80ft\", \"diesel\")\n\nprint(f\"{sailboat.size=}, {tugboat.power=}\")\n</code></pre> <p>This also works for classes already defined in the JavaScript global scope. For example, to create a new JavaScript Float64Array (an array of 8-byte floats), you can use the following similar syntax:</p> <pre><code>from js import Float64Array\n\nmy_array = Float64Array.new([1,2,3,4])\n\nprint(my_array)\nprint(f\"{my_array.byteLength= }\")\n</code></pre>"},{"location":"js-integration/export-js/","title":"Exporting Objects from Python to JS","text":"PyScriptPyodide <p>The PyScript (Pyodide) and PyScript(Micropython) version of this recipe are identical, </p> <p><p>In the same way that <code>pyscript.window</code> can be used to import JavaScript objects into Python, the same object can be assigned to to create JavaScript objects from Python.</p> <p>If we have some Python objects that we'd like to export as a JavaScript objects:</p></p> <pre><code>my_string = \"This sure is a string\"\nmy_list = [1,2,3]\n\ndef square(x):\n    return x * x\n\nclass SimpleClass:\n    def __init__(self, name):\n        self.name = name\n\nmy_instance = SimpleClass(\"some name\")\n</code></pre> <p><p>We can use the following Python syntax to create corresponding JavaScript objects:</p></p> <pre><code>from pyscript import window\n\nwindow.a_string = my_string\nwindow.a_list = [1,2,3]\nwindow.square_func_from_python = square\nwindow.some_instance = my_instance\nwindow.some_class = SimpleClass\n</code></pre> <p><p>Notice that we can translate simple objects like strings, and increasingly more complex objects like lists, functions, class instances, and classes. Simple objects like <code>int</code>s, <code>str</code>s, and <code>bool</code>s get converted to their corresponding JavaScript types; anything more complex appears in JavaScript as a proxy for the corresponding Python object. For a complete description of how objects are translated and proxied, see the Pyodide Documentation.</p></p> <p>Tip</p> <p>These examples work regardless of whether the code is run in the main thread or a worker thread - <code>pyscript.window</code> always references the global scope of the main thread. If you need access to the global scope of a worker thread, use <code>import js</code>, which is a proxy for the global scope of the thread the code is running in.</p> <p><p>In the same way that the <code>js</code> pseudo-module can be used to import JavaScript objects into Python, the same 'module' can be assigned to to create JavaScript objects from Python.</p> <p>If we have some Python objects that we'd like to export as a JavaScript objects:</p></p> <pre><code>my_string = \"This sure is a string\"\nmy_list = [1,2,3]\n\ndef square(x):\n    return x * x\n\nclass SimpleClass:\n    def __init__(self, name):\n        self.name = name\n\nmy_instance = SimpleClass(\"some name\")\n</code></pre> <p><p>We can use the following Python syntax to create corresponding JavaScript objects:</p></p> <pre><code>import js\n\njs.a_string = my_string\njs.a_list = my_list\njs.square_func_from_python = square\njs.some_instance = my_instance\njs.some_class = SimpleClass\n</code></pre> <p><p>Notice that we can translate simple objects like strings, and increasingly more complex objects like lists, functions, class instances, and classes. Simple objects like <code>int</code>s, <code>str</code>s, and <code>bool</code>s get converted to their corresponding JavaScript types; anything more complex appears in JavaScript as a proxy for the corresponding Python object. For a complete description of how objects are translated and proxied, see the Pyodide Documentation.</p></p>"},{"location":"js-integration/export-py/","title":"Exporting Objects from JS to Python","text":"<p>It may be useful for some applications to create new Python objects directly from JavaScript.</p> PyScriptPyodide <p>The PyScript (Pyodide) and PyScript(Micropython) version of this recipe are identical, </p> <p>We can use an alternate way of loading PyScript to install a hook, which stores a reference to the interpreter for later use. In this case, we'll store a global reference to the interpreter by assigning to the <code>window</code> object.</p> <p>Info</p> <p>The following code can replace the typical script tag that would be used to load PyScript. Or they can be used together, if their URLs match; the PyScript module will only be imported once regardless.</p> <pre><code>&lt;script type=\"module\"&gt;\n    import { config, hooks } from \"https://pyscript.net/releases/2023.12.1/core.js\"\n    hooks.onInterpreterReady.add((wrap, element) =&gt; {\n        window.pyInterpreter = wrap.interpreter\n    })\n\n    var my_js_array = [1,2,3,4]\n&lt;/script&gt;\n</code></pre> <p>Once stored, we can create Python proxies of JavaScript objects by using <code>pyInterpreter.globals.set(name, value)</code>:</p> <pre><code>&lt;button onclick=\"console.log(pyInterpreter.globals.get('myArray', my_js_array))\"&gt;Click Me&lt;/button&gt;\n</code></pre> <p>Warning</p> <p>Retrieving values from the interpreter will only succeed once the interpreter has been initialized and its code has run. You may wish to listen for the <code>py:all-done</code> event and only act when the interpreter is ready.</p> <p><p>Once Pyodide has been loaded, we can use JavaScript to directly create Python objects using <code>pyodide.globals.set(name, value)</code>:</p></p> <pre><code>async function main() {\n    let pyodide = await loadPyodide();\n\n    const s = 'hello world'\n    pyodide.globals.set('my_string', s)\n\n    // Pyodide is now ready to use...\n    pyodide.runPython(`\n        print(my_string)\n    `);\n};\nmain(); \n</code></pre>"},{"location":"js-integration/fundamentals/","title":"Fundamentals","text":"<p>The native language of the Web Browser is JavaScript. Every modern web browser comes with a JavaScript engine responsible responsible for parsing and executing JavaScript code. As such, most of the web standards and behaviors related to programming behavior on the page deal directly in JavaScript. What's more, almost every useful frontend or Node framework is written in JavaScript.</p> <p>Pyodide and PyScript allow the user to take advantage of these existing resources and functionalities through the use of a \"translation layer.\" This layer is responsible for translating JavaScript objects to Python objects (and vice versa), and allowing objects from one langauge to be used as objects of the other.</p> <p>Simple immutable objects, like string and integers, are converted directly to their corresponding types. More complex or mutable objects are passed by reference as a Proxy of the object from the other language. For more details about how and when objects are converted or Proxied see the Pyodide Documentation</p> <p>The remainder of this category explores how to make use of this functionality.</p>"},{"location":"js-integration/import-js/","title":"Importing JS Objects in Python","text":"PyScriptPyodide <p>The PyScript (Pyodide) and PyScript(Micropython) version of this recipe are identical, </p> <p>In PyScript, the object <code>window</code> in the <code>pyscript</code> namespace is a proxy for the JavaScript Global Scope of the main thread That is to say, if we have an variable in the JavaScript global scope of the main (window) thread:</p> <pre><code>&lt;script&gt;\n    // Create a JavaScript global variable called my_string\n    var my_string = \"Hello, world\"\n&lt;/script&gt;\n</code></pre> <p>We can access it (and in this case, print the string it represents) using either any of the following Python syntax options:</p> <p><pre><code>import pyscript\nprint(pyscript.window.my_string)\n</code></pre> or </p> <pre><code>from pyscript import window\nprint(window.my_string)\n</code></pre> <p>Tip</p> <p>These examples work regardless of whether the code is run in the main thread or a worker thread - <code>pyscript.window</code> always references the global scope of the main thread. If you need access to the global scope of a worker thread, use <code>import js</code>, which is a proxy for the global scope of the thread the code is running in.</p> <p><p>In Pyodide, the pseudo-module <code>js</code> is a proxy for the JavaScript Global Scope of the thread the code is currently running in. That is to say, if we have an variable in the JavaScript global scope:</p></p> <pre><code>&lt;script&gt;\n    // Create a JavaScript global variable called my_string\n    var my_string = \"Hello, world\"\n&lt;/script&gt;\n</code></pre> <p><p>We can access it (and in this case, print the string it represents) using either any of the following Python syntax options:</p></p> <pre><code>import js\nprint(js.my_string)\n</code></pre> <pre><code>from js import my_string\nprint(my_string)\n</code></pre>"},{"location":"js-integration/import-py/","title":"Importing Python Objects in JavaScript","text":"<p>It may be useful for some applications to extract objects from Python via JavaScript by name. This is, in generally, a little messier than exporting objects from Python directly, but for some use cases it may be necessary</p> PyScriptPyodide <p>The PyScript (Pyodide) and PyScript(Micropython) version of this recipe are identical, </p> <p>We can use an alternate way of loading PyScript to install a hook, which stores a reference to the interpreter for later use. In this case, we'll store a global reference to the interpreter by assigning to the <code>window</code> object.</p> <p>Info</p> <p>The following code can replace the typical script tag that would be used to load PyScript. Or they can be used together, if their URLs match; the PyScript module will only be imported once regardless.</p> <pre><code>&lt;script type=\"module\"&gt;\n    import { config, hooks } from \"https://pyscript.net/releases/2023.12.1/core.js\"\n    hooks.onInterpreterReady.add((wrap, element) =&gt; {\n        window.pyInterpreter = wrap.interpreter\n    })\n&lt;/script&gt;\n\n&lt;script type=\"py\"&gt;\n    my_string = \"Hello, world!\"\n&lt;/script&gt;\n</code></pre> <p>Once stored, we can access Python objects by name by using (in this case) <code>pyInterpreter.globals.get(name)</code>:</p> <pre><code>&lt;button onclick=\"console.log(pyInterpreter.globals.get('my_string'))\"&gt;Click Me&lt;/button&gt;\n</code></pre> <p>Warning</p> <p>Retrieving values from the interpreter will only succeed once the interpreter has been initialized and its code has run. You may wish to listen for the <code>py:all-done</code> event and only act when the interpreter is ready.</p> <p>Once Pyodide has been loaded, we can extract objects from its global scope. If we have objects in the Python global scope, we can extract them in JavaScript using <code>pyodide.globals.get(...)</code>:</p> <pre><code>async function main() {\n    let pyodide = await loadPyodide();\n    // Pyodide is now ready to use...\n    console.log(pyodide.runPython(`\n        my_string = \"Hello again\"\n    `));\n\n    const s = pyodide.globals.get('my_string')\n    console.log(s) #logs hello again\n};\nmain(); \n</code></pre>"},{"location":"js-integration/js-modules/","title":"Importing JS Modules","text":"PyScript (Pyodide)PyScript (Micropython) <p>PyScript can automatically load JavaScript (ECMAScript) modules and make them available for import in Python, using the <code>js_modules</code> table in <code>&lt;py-config&gt;</code>. The table has two subtables, <code>main</code> and <code>worker</code>, each of which is a list of <code>URL: python_name</code> pairs:</p> <pre><code>&lt;py-config&gt;\n    [js_modules.main]\n    \"https://cdn.jsdelivr.net/npm/fireworks-js@2.10.7/+esm\" = \"Fireworks\"\n\n    [js_modules.worker]\n    \"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/+esm\" = \"Mathjax\"\n&lt;/py-config&gt;\n</code></pre> <p>The location specifier (<code>main</code> or <code>worker</code>) specifies where the ESM module itself is loaded. Modules loaded on the main thread are available to Python running on both the main thread and in workers. Most modules should likely be loaded to the main thread if their authors assume they'll have access to the DOM.</p> <p>Once included, modules can be imported within Python as a submobule of the <code>polyscript.js_modules</code>, constructed and interacted with like any other JavaScript object.</p> <p>Info</p> <p>The <code>polyscript.js_modules</code> package will change to <code>pyscript.js_modules</code> in a future release.</p> <p>Example</p> <pre><code>&lt;div id=\"fw\"&gt;&lt;/div&gt;\n\n&lt;py-config&gt;\n    [js_modules.main]\n    \"https://cdn.jsdelivr.net/npm/fireworks-js@2.10.7/+esm\" = \"Fireworks\"\n&lt;/py-config&gt;\n\n&lt;script type=\"py\"&gt;\n    # Import ESM module just like a Python module\n    from polyscript.js_modules import Fireworks\n\n    # Start fireworks on the page\n    from pyscript import document\n    container = document.getElementById(\"fw\")\n    f = Fireworks.Fireworks.new(container)\n    f.start()\n&lt;/script&gt;\n</code></pre> <p>This feature is not yet available in Micropython, but will be integrated in an upcoming release.</p>"},{"location":"other-resources/null/","title":"Null","text":"<p>foo?</p>"},{"location":"page-elements/color-picker/","title":"Color Picker","text":"<p>Modern browsers have the ability to add a simple color picker directly to your HTML, using <code>&lt;input type=\"color\"&gt;</code> If your browser supports one, it looks like this:</p> <p></p> <p>The html for this element looks like this:</p> <pre><code>&lt;input type=\"color\" id=\"main-color\"&gt;\n</code></pre> <p>There are several events one can listen to react to the user changing color, including:</p> <ul> <li><code>click</code> - fires when the user first clicks on the element to open the color picker</li> <li><code>input</code> - fires whenever the user selects a new color within the color picker</li> <li><code>change</code> - fires when the user deselects/closes the color picker</li> </ul> PyScriptPyodide <p><p>To listen for these events in PyScript, add an attribute called <code>py-[event]</code> to the <code>input</code> object, where <code>[event]</code> is the type of one of these events above.</p> <p>For example, the following code prints:</p> <ul> <li>An acknowledgement that the user opened the color picker</li> <li>The selected color whenver the color is changed</li> <li>The 'final' selected color when the color picker is closed</li> </ul></p> <pre><code>&lt;input type=\"color\" \n    id=\"main-color\" \n    py-click=\"opened_picker\"\n    py-input=\"color_changed\" \n    py-change=\"final_color\"&gt;\n</code></pre> <pre><code>from pyscript import display, document\n\ndef opened_picker(*args):\n    display(\"You opened the color picker!\")\n\ndef color_changed(*args):\n    elem = document.getElementById(\"main-color\")\n    value = elem.value\n    display(f\"The color changed to: {value}\")\n\ndef final_color(*args):\n    elem = document.getElementById(\"main-color\")\n    value = elem.value\n    display(f\"The selected color is: {value}\")\n</code></pre> <p><p>To listen for these events in Pyodide, once Pyodide is loaded,, use Pyodide's <code>add_event_listener</code> function to attach the appropraite event listeners to the <code>&lt;input&gt;</code> element.</p> <p>For example, the following code prints:</p> <ul> <li>An acknowledgement that the user opened the color picker</li> <li>The selected color whenver the color is changed</li> <li>The 'final' selected color when the color picker is closed</li> </ul> <pre><code>&lt;input type=\"color\" id=\"main-color\" &gt;\n</code></pre> <p>The following Python code should be run using <code>pyodide.runPython</code>:</p></p> <pre><code>import js\nfrom pyodide.ffi.wrappers import add_event_listener\n\ndef opened_picker(event):\n    print(\"You opened the color picker!\")\n\ndef color_changed(event):\n    value = event.target.value\n    print(f\"The color changed to: {value}\")\n\ndef final_color(event):\n    value = event.target.value\n    print(f\"The selected color is: {value}\")\n\nelem = js.document.getElementById(\"main-color\")\nadd_event_listener(elem, 'click', opened_picker)\nadd_event_listener(elem, 'input', color_changed)\nadd_event_listener(elem, 'change', final_color)\n</code></pre>"},{"location":"terminal/repl/","title":"Interactive REPL","text":"<p>To activate an interactive \"REPL\" for Python or Micropython, add the following two lines of code to the code of the terminal script:</p> <pre><code>&lt;script type=\"py\" terminal worker&gt;\n    import code\n    code.interact()\n&lt;/script&gt;\n</code></pre> <p>Warning</p> <p>The interactive REPL is only accessible when the terminal's interpreter is running in a worker.</p>"},{"location":"terminal/terminal-addons/","title":"Terminal Addons","text":"<p>The xtermjs console that powers the PyScript terminal can make use of a variety of addons to add specific functionality. The fit and web links addons are included out-of-the-box. To add an addon, grab the terminal object using the <code>__terminal__</code> global name and add a newly instatiated addon object to it. You can instantiate the addon via JavaScript, or using the js-integration/js-modules.md functionality included with PyScript:</p> <pre><code>&lt;py-config&gt;\n    [js_modules.main]\n    \"https://cdn.jsdelivr.net/npm/@xterm/addon-web-links@0.11.0/+esm\" = \"weblinks\"\n&lt;/py-config&gt;\n&lt;script type=\"py\" terminal&gt;\n    from pyscript import js_modules\n\n    addon = js_modules.weblinks.WebLinksAddon.new()\n    __terminal__.loadAddon(addon)\n\n    print(\"Check out https://google.com\")\n&lt;/script&gt;\n</code></pre>"},{"location":"terminal/terminal-attribute/","title":"Controlling the Terminal from PyScript","text":"<p>The xtermjs which underlies a given PyScript terminal can be accessed directly via the <code>__terminal__</code> global name, when code is running in a terminal. This can be used to control the properties of the terminal to, say, change the numbers of columns and rows:</p> <pre><code>&lt;script type=\"py\" terminal &gt;\n    __terminal__.resize(40, 6)\n    print(\"Lorem ipsum dolor sit amet consectetur, adipisicing elit. \")\n&lt;/script&gt;\n</code></pre>"},{"location":"terminal/terminal-intro/","title":"The Py-Terminal","text":"<p>Users can add an interactive terminal to their page by adding <code>&lt;script type=\"py\" terminal&gt;&lt;/script&gt;</code> (or <code>&lt;script type=\"mpy\" terminal&gt;</code>). This initializes a terminal emulated powered by xtermjs at that location on the page, which supports colors, formatting, and terminal control messages, allowing Python programs that expect to output to a rich console to display properly.</p> <p>The <code>terminal</code> attribute can be combined with the <code>worker</code> attribute to create a terminal process whose code executes in a worker process, so that the main thread is not locked up.</p> <pre><code>&lt;py-config&gt;\n    packages = ['colorama']\n&lt;/py-config&gt;\n&lt;script type=\"py\" terminal&gt;\n    from colorama import Fore, Back, Style\n    print(Fore.RED + 'some red text')\n    print(Back.GREEN + 'and with a green background')\n    print(Style.DIM + 'and in dim text')\n    print(Style.RESET_ALL)\n    print('back to normal now')\n&lt;/script&gt;\n</code></pre>"}]}